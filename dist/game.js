'use strict';

var foreign0 = /*#__PURE__*/Object.freeze({
    __proto__: null
});

var foreign1 = /*#__PURE__*/Object.freeze({
    __proto__: null
});

class MoveComponent extends Component {
    constructor() {
        super(...arguments);
        this._velocity = new Vector();
    }
    get velocity() {
        return this._velocity.clone();
    }
    set velocity(v) {
        this._velocity.set(v);
    }
}

var foreign2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    MoveComponent: MoveComponent
});

class TransformComponent extends Component {
    constructor() {
        super(...arguments);
        this._transform = new Transform();
    }
    get transform() {
        return this._transform.clone();
    }
    set transform(v) {
        this._transform.position.set(v.position);
        this._transform.rotation.set(v.rotation);
        this._transform.scale.set(v.scale);
    }
    get position() {
        return this._transform.position.clone();
    }
    set position(v) {
        this._transform.position.set(v);
    }
    get rotation() {
        return this._transform.rotation.clone();
    }
    set rotation(v) {
        this._transform.rotation.set(v);
    }
    get scale() {
        return this._transform.scale.clone();
    }
    set scale(v) {
        this._transform.scale.set(v);
    }
}

var foreign3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    TransformComponent: TransformComponent
});

let Component$1 = class Component {
};

var foreign4 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Component: Component$1
});

class Entity {
    constructor(id) {
        this.id = id;
        this.components = new Map();
    }
    get gameobject() {
        return this._gameobject;
    }
    addComponent(cls) {
        if (!this.components.has(cls.name)) {
            this.components.set(cls.name, new cls());
        }
        return this.components.get(cls.name);
    }
    getComponent(cls) {
        return this.components.get(cls.name);
    }
    removeComponent(cls) {
        if (this.components.has(cls.name)) {
            this.components.delete(cls.name);
        }
    }
    hasComponent(cls) {
        return this.components.has(cls.name);
    }
}

var foreign6 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Entity: Entity
});

class EntityMgr {
    constructor() {
        this._index = 0;
        this._entities = [];
        this._entityMap = new Map();
    }
    createEntity() {
        let entity = new Entity(this._index++);
        this._entityMap.set(entity.id, entity);
        this._entities.push(entity);
        return entity;
    }
    removeEntity(entity) {
        let index = this._entities.indexOf(entity);
        if (index >= 0) {
            this._entities.splice(index, 1);
        }
        this._entityMap.delete(entity.id);
    }
    getEntity(id) {
        return this._entityMap.get(id);
    }
    get entities() {
        return this._entities;
    }
    get count() {
        return this._entities.length;
    }
    clear() {
        this._entityMap.clear();
        this._entities.length = 0;
    }
}

var foreign7 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    EntityMgr: EntityMgr
});

class EcsMgr {
    constructor() {
        this._entityMgr = new EntityMgr();
        this._systems = [];
    }
    static get instance() {
        if (EcsMgr._instance == null) {
            EcsMgr._instance = new EcsMgr();
        }
        return EcsMgr._instance;
    }
    addSystem(cls) {
        let system = new cls();
        this._systems.push(system);
        return system;
    }
    createEntity() {
        return this._entityMgr.createEntity();
    }
    removeEntity(entity) {
        this._entityMgr.removeEntity(entity);
    }
    getEntity(id) {
        return this._entityMgr.getEntity(id);
    }
    update(dt) {
        const entities = this._entityMgr.entities;
        for (let i = 0; i < this._systems.length; i++) {
            this._systems[i].update(dt, entities);
        }
    }
}
EcsMgr._instance = null;

var foreign5 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    EcsMgr: EcsMgr
});

class System {
}

var foreign8 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    System: System
});

class moveSystem extends System {
    update(dt, entities) {
        for (let entity of entities) {
            if (entity.hasComponent(MoveComponent) && entity.hasComponent(TransformComponent)) {
                continue;
            }
            let moveComponent = entity.getComponent(MoveComponent);
            let transformComponent = entity.getComponent(TransformComponent);
            const position = transformComponent.position;
            transformComponent.transform.position = position.add(moveComponent.velocity.multiply(dt));
        }
    }
}

var foreign9 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    moveSystem: moveSystem
});

class TransformSystem extends System {
    update(dt, entities) {
        for (let entity of entities) {
            if (entity.hasComponent(TransformComponent)) {
                let transformComponent = entity.getComponent(TransformComponent);
                entity.gameobject.worldTransform = transformComponent.transform;
            }
        }
    }
}

var foreign10 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    TransformSystem: TransformSystem
});

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */


function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

/**
 * AUTO GENERATE BY UI EDITOR.
 * WARNING: DO NOT MODIFY THIS FILE,MAY CAUSE CODE LOST.
 * ATTENTION: onStart 等UI脚本自带函数不可改写为异步执行，有需求的异步逻辑请使用函数封装，通过函数接口在内部使用
 * UI: UI/PlayUI.ui
*/
let PlayUI_Generate = class PlayUI_Generate extends UIScript {
    get jumpCanvas() {
        if (!this.jumpCanvas_Internal && this.uiWidgetBase) {
            this.jumpCanvas_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/jumpCanvas');
        }
        return this.jumpCanvas_Internal;
    }
    get jumpBtn() {
        if (!this.jumpBtn_Internal && this.uiWidgetBase) {
            this.jumpBtn_Internal = this.uiWidgetBase.findChildByPath('RootCanvas/jumpCanvas/jumpBtn');
        }
        return this.jumpBtn_Internal;
    }
    /**
    * onStart 之前触发一次
    */
    onAwake() {
    }
};
PlayUI_Generate = __decorate([
    UIBind('UI/PlayUI.ui')
], PlayUI_Generate);
var PlayUI_Generate$1 = PlayUI_Generate;

var foreign13 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: PlayUI_Generate$1
});

class PlayUI extends PlayUI_Generate$1 {
    onStart() {
        this.jumpBtn.onClicked.add(() => {
            Player.localPlayer.character.jump();
        });
    }
}

var foreign12 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    PlayUI: PlayUI
});

let GameStart = class GameStart extends Script {
    /** 当脚本被实例后，会在第一帧更新前调用此函数 */
    onStart() {
        if (SystemUtil.isClient()) {
            Player.localPlayer.character.asyncReady().then((cha) => {
                cha.complexMovementEnabled = false;
            });
            UIService.show(PlayUI);
        }
        EcsMgr.instance.addSystem(moveSystem);
        EcsMgr.instance.addSystem(TransformSystem);
    }
    /**
     * 周期函数 每帧执行
     * 此函数执行需要将this.useUpdate赋值为true
     * @param dt 当前帧与上一帧的延迟 / 秒
     */
    onUpdate(dt) {
    }
    /** 脚本被销毁时最后一帧执行完调用此函数 */
    onDestroy() {
    }
};
GameStart = __decorate([
    Component
], GameStart);
var GameStart$1 = GameStart;

var foreign11 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    default: GameStart$1
});

class Utils {
}

var foreign14 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Utils: Utils
});

const MWModuleMap = { 
     'build': foreign0,
     'JavaScripts/Const': foreign1,
     'JavaScripts/ecs/component/MoveComponent': foreign2,
     'JavaScripts/ecs/component/TransformComponent': foreign3,
     'JavaScripts/ecs/lib/Component': foreign4,
     'JavaScripts/ecs/lib/EcsMgr': foreign5,
     'JavaScripts/ecs/lib/Entity': foreign6,
     'JavaScripts/ecs/lib/EntityMgr': foreign7,
     'JavaScripts/ecs/lib/System': foreign8,
     'JavaScripts/ecs/system/MoveSystem': foreign9,
     'JavaScripts/ecs/system/TransformSystem': foreign10,
     'JavaScripts/GameStart': foreign11,
     'JavaScripts/ui/PlayUI': foreign12,
     'JavaScripts/ui-generate/PlayUI_generate': foreign13,
     'JavaScripts/Utils': foreign14,
};

exports.MWModuleMap = MWModuleMap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
